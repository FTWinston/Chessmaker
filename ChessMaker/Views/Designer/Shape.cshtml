@model ChessMaker.Models.BoardShapeModel

@{
    ViewBag.Title = "'" + Model.VariantName + "' board shape";
    ViewBag.MinimalLayout = true;
}

<div id="main">
    <svg id="render" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"></svg>
</div>

<div id="sidebar">
    <div id="toolbox" class="section ui-widget ui-corner-all">
        <h3>Add board elements</h3>
        <span class="button addItem square">Square</span>
        <span class="button addItem squares">Squares</span>
        <span class="button addItem hex">Hex</span>
        <span class="button addItem hexes">Hexes</span>
        <span class="button addItem triangle">Triangle</span>
        <span class="button addItem triangles">Triangles</span>
        <span class="button addItem line">Line</span>
        <span class="button addItem circle">Circle</span>
    </div>

    <div id="itemProperties" class="section ui-widget ui-corner-all">
        <h3>Edit selected element(s)</h3>

        <div class="arrowKeys">
            <div class="button" id="moveUp">move up</div>
            <div class="button" id="moveDown">move down</div>
            <div class="button" id="moveLeft">move left</div>
            <div class="button" id="moveRight">move right</div>

            <div class="button" id="moveUpFast">fast up</div>
            <div class="button" id="moveDownFast">fast down</div>
            <div class="button" id="moveLeftFast">fast left</div>
            <div class="button" id="moveRightFast">fast right</div>

            <div class="button" id="rotateCW">rotate clockwise</div>
            <div class="button" id="rotateCCW">rotate anticlockwise</div>

            <div class="button" id="lineEnds" mode="both">change line end(s)</div>

            <div class="button" id="copy">copy selection</div>
            <div class="button" id="deleteCell">delete selection</div>
        </div>

        <div class="fill color">
            <div>Color:</div>
            <input type="radio" id="fillLight" name="color" value="light" checked="checked" /><label for="fillLight">Light</label>
            <input type="radio" id="fillMid" name="color" value="mid" /><label for="fillMid">Mid</label>
            <input type="radio" id="fillDark" name="color" value="dark" /><label for="fillDark">Dark</label>
        </div>
        <br />
        <div class="stroke color">
            <div>Border:</div>
            <input type="radio" id="strokeNone" name="stroke" value="" checked="checked" /><label for="strokeNone">None</label>
            <input type="radio" id="strokeLight" name="stroke" value="light" /><label for="strokeLight">Light</label>
            <input type="radio" id="strokeMid" name="stroke" value="mid" /><label for="strokeMid">Mid</label>
            <input type="radio" id="strokeDark" name="stroke" value="dark" /><label for="strokeDark">Dark</label>
        </div>
    </div>
</div>

<div id="addSquares" class="popup" title="Add squares">
	<label for="sqWidth">Width</label>
	<input type="text" id="sqWidth" value="8" class="text ui-widget-content" />
	<label for="sqHeight">Height</label>
	<input type="text" id="sqHeight" value="8" class="text ui-widget-content ui-corner-all" />
	<label for="sqPattern">Pattern</label>
	<select id="sqPattern" class="ui-widget-content">
		<option value="1">All light</option>
		<option value="2">All mid</option>
		<option value="3">All dark</option>
		<option value="4" selected="selected">Light/dark</option>
		<option value="5">Light/mid</option>
		<option value="6">Mid/dark</option>
	</select>
    <label for="sqStroke">Cell border</label>
	<select id="sqStroke" class="ui-widget-content">
		<option value="" selected="selected">None</option>
		<option value="lightStroke">Light</option>
		<option value="midStroke">Mid</option>
		<option value="darkStroke">Dark</option>
	</select>
</div>

<div id="addHexes" class="popup" title="Add hexes">
	<label for="hexLength">Length</label>
	<input type="text" id="hexLength" value="3" class="text ui-widget-content" />
	<label for="hexPattern">Pattern</label>
	<select id="hexPattern" class="ui-widget-content">
		<option value="1">All light</option>
		<option value="2">All mid</option>
		<option value="3">All dark</option>
		<option value="7" selected="selected">Light/mid/dark</option>
	</select>
    <label for="hexStroke">Cell border</label>
	<select id="hexStroke" class="ui-widget-content">
		<option value="" selected="selected">None</option>
        <option value="lightStroke">Light</option>
        <option value="midStroke">Mid</option>
        <option value="darkStroke">Dark</option>
	</select>
</div>

<div id="addTriangles" class="popup" title="Add triangles">
	<label for="triLength">Length</label>
	<input type="text" id="triLength" value="5" class="text ui-widget-content" />
	<label for="triPattern">Pattern</label>
	<select id="triPattern" class="ui-widget-content">
		<option value="1">All light</option>
		<option value="2">All mid</option>
		<option value="3">All dark</option>
		<option value="4" selected="selected">Light/dark</option>
		<option value="5">Light/mid</option>
		<option value="6">Mid/dark</option>
	</select>
    <label for="triStroke">Cell border</label>
	<select id="triStroke" class="ui-widget-content">
		<option value="" selected="selected">None</option>
        <option value="lightStroke">Light</option>
        <option value="midStroke">Mid</option>
        <option value="darkStroke">Dark</option>
	</select>
</div>

<div id="addCircle" class="popup" title="Add circle / ring / wedge / arch">
	<label for="cirRadius">Radius</label>
	<input type="text" id="cirRadius" value="4" class="text ui-widget-content" />
	<label for="cirRadiusInner">Inner radius</label>
	<input type="text" id="cirRadiusInner" value="0" class="text ui-widget-content" />
	<label for="cirSlicesTot">Slices (total circle)</label>
	<input type="text" id="cirSlicesTot" value="8" class="text ui-widget-content" />
	<label for="cirSlicesAct">Slices (actual)</label>
	<input type="text" id="cirSlicesAct" value="8" class="text ui-widget-content" />
	<label for="cirPattern">Pattern</label>
	<select id="cirPattern" class="ui-widget-content">
		<option value="1">All light</option>
		<option value="2">All mid</option>
		<option value="3">All dark</option>
		<option value="4" selected="selected">Light/dark</option>
		<option value="5">Light/mid</option>
		<option value="6">Mid/dark</option>
	</select>
    <label for="cirStroke">Cell border</label>
	<select id="cirStroke" class="ui-widget-content">
		<option value="" selected="selected">None</option>
        <option value="lightStroke">Light</option>
        <option value="midStroke">Mid</option>
        <option value="darkStroke">Dark</option>
	</select>
</div>

@using (Html.BeginForm("Shape", "Designer", FormMethod.Post, new { id = "shapeForm" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary()

    @Html.Hidden("shapeData", Model.SvgData, new { id = "shapeData" })
    @Html.Hidden("linkData", Model.LinkData, new { id = "linkData" })

    <input type="submit" name="next" id="submitPrev" value="prev" />
    <input type="submit" name="next" id="submitCurrent" value="this" />
    <input type="submit" name="next" id="submitNext" value="next" />
    <input type="submit" name="next" id="submitDone" value="done" />
}

@section actions {
    @if (Model.PrevPage != null) {
    <button onclick="$('#submitPrev').click();" title="@Model.PrevPageTooltip">&lt; @Model.PrevPage</button>
    }
    <button onclick="$('#submitCurrent').click();" title="save your changes, staying on the current page" class="current">@Model.ThisPage</button>
    @if (Model.NextPage != null) {
    <button onclick="$('#submitNext').click();" title="@Model.NextPageTooltip">@Model.NextPage &gt;</button>
    }
    <button onclick="location.reload();" id="btnReset" title="reload the current page, resetting your changes">Reset</button>
    <button onclick="$('#submitDone').click();" title="save changes and exit variant designer">Close</button>
}

@section css {
    @Styles.Render("~/Content/Designer/Base.css", "~/Content/Designer/Shape.css")
}

@section scripts {
    @Scripts.Render("~/Scripts/Designer/Base.js", "~/Scripts/Designer/Shape.js")
}