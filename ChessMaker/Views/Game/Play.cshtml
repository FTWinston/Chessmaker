@model ChessMaker.Models.GamePlayModel

@{
    ViewBag.Title = Model.Mode + " game: " + Model.Name;
    ViewBag.MinimalLayout = true;
}

<div id="main">

</div>

<div id="sidebar">
    <div class="section ui-widget ui-corner-all">
        <h3 id="nextMove">Initializing</h3>
        <div id="wait">Please wait...</div>
        <div id="moveHistory" class="sideList"></div>
    </div>
    <div id="captureSection" class="section ui-widget ui-corner-all">
        <h3>Captured</h3>
        <svg id="captured" class="pieceList sideList"></svg>
    </div>
    <div id="heldSection" class="section ui-widget ui-corner-all">
        <h3>Held</h3>
        <svg id="held" class="pieceList sideList"></svg>
    </div>
</div>

@section css {
    @Styles.Render("~/Content/Game.css")
    @Styles.Render("~/Users/Theme")
}

@section scripts {
    @Scripts.Render("~/bundles/game")
    
  <script type="text/javascript">
    var players = [
    @Model.Players[0].IsAI ? (Model.Players[0] as ChessMaker.Models.AIDifficultyModel).InternalName : Model.Players[0].IsLocal.ToString()
    @for (var i = 1; i < Model.Players.Length; i++) {
        @:, @Model.Players[i].IsAI ? (Model.Players[i] as ChessMaker.Models.AIDifficultyModel).InternalName : Model.Players[i].IsLocal.ToString()
    }
    ];

    $.ajax({
        type: "GET",
        url: "@(Model.Version.HasValue ? Url.Action("Definition", new { id = Model.Tag, version = Model.Version.Value }) : Url.Action("Definition", new { id = Model.Tag }))",
        dataType: "text",
        success: loadDefinition
    });
</script>
}
